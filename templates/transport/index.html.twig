{% extends 'basefrontoffice.html.twig' %}

{% block title %}transport index{% endblock %}

{% block section8 %}
<div class="transport-index-wrapper">
    <div class="transport-index-header">
        <h1>Transport Management</h1>
        <a href="{{ path('app_transport_new') }}" class="create-btn">
            <i class="ti-plus"></i> Create new transport
        </a>
    </div>
    
    <!-- Search and Filter Section -->
    <div class="search-filter-container">
        <div class="search-box">
            <i class="ti-search search-icon"></i>
            <input type="text" id="transportSearch" placeholder="Search transports..." class="search-input">
        </div>
        <div class="filter-container">
            <button id="filterButton" class="filter-btn">
                <i class="ti-filter"></i> Filter
                <i class="ti-angle-down"></i>
            </button>
            <div id="filterDropdown" class="filter-dropdown-content">
                <div class="filter-group">
                    <h3>Car Color</h3>
                    <div class="filter-options">
                        <label><input type="checkbox" value="black"> Black</label>
                        <label><input type="checkbox" value="white"> White</label>
                        <label><input type="checkbox" value="silver"> Silver</label>
                        <label><input type="checkbox" value="blue"> Blue</label>
                        <label><input type="checkbox" value="red"> Red</label>
                        <label><input type="checkbox" value="yellow"> Yellow</label>
                        <label><input type="checkbox" value="green"> Green</label>
                        <label><input type="checkbox" value="grey"> Grey</label>
                        <label><input type="checkbox" value="brown"> Brown</label>
                        
                    </div>
                </div>
                <div class="filter-group">
                    <h3>Max Luggage</h3>
                    <div class="filter-options">
                        <label><input type="checkbox" value="1-2"> 1-2</label>
                        <label><input type="checkbox" value="3-4"> 3-4</label>
                        <label><input type="checkbox" value="5+"> 5+</label>
                    </div>
                </div>
                <div class="filter-actions">
                    <button id="clearFilters" class="filter-clear">Clear all</button>
                    <button id="applyFilters" class="filter-apply">Apply filters</button>
                </div>
            </div>
        </div>
    </div>
    
    <div class="transport-table-container">
        <div class="table-icon">
            <i class="ti-car"></i>
        </div>
        
        {% if transports|length > 0 %}
        <div class="table-responsive">
            <table class="table">
                <thead>
                    <tr>
                        <th>Id</th>
                        <th>Car Model</th>
                        <th>Car Color</th>
                        <th>License Plate</th>
                        <th>Max Luggage</th>
                        <th class="actions-column">Actions</th>
                    </tr>
                </thead>
                <tbody id="transportTableBody">
                {% for transport in transports %}
                    <tr>
                        <td>{{ transport.id }}</td>
                        <td>{{ transport.carModel }}</td>
                        <td>{{ transport.carColor }}</td>
                        <td>{{ transport.licensePlate }}</td>
                        <td>{{ transport.maxLuggage }}</td>
                        <td class="actions-column">
                            <div class="action-buttons">
                                <a href="{{ path('app_transport_show', {'id': transport.id}) }}" class="view-btn">
                                    <i class="ti-eye"></i> View
                                </a>
                                <a href="{{ path('app_transport_edit', {'id': transport.id}) }}" class="edit-btn">
                                    <i class="ti-pencil"></i> Edit
                                </a>
                            </div>
                        </td>
                    </tr>
                {% endfor %}
                </tbody>
            </table>
        </div>
        <div id="no-search-results" class="no-records" style="display: none;">
            <div class="no-records-icon">
                <i class="ti-search"></i>
            </div>
            <h3>No matching transports found</h3>
            <p>Try adjusting your search criteria or filters.</p>
        </div>
        {% else %}
        <div class="no-records">
            <div class="no-records-icon">
                <i class="ti-alert"></i>
            </div>
            <h3>No transports found</h3>
            <p>There are no transport records in the system.</p>
        </div>
        {% endif %}
    </div>
</div>

<style>
    .transport-index-wrapper {
        padding: 60px 20px;
        max-width: 1200px;
        margin: 0 auto;
        font-family: 'Poppins', sans-serif;
    }
    
    .transport-index-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 40px;
        padding-bottom: 15px;
        border-bottom: 2px solid #f0f0f0;
    }
    
    .transport-index-header h1 {
        font-size: 36px;
        color: #263A5B;
        margin: 0;
        font-weight: 700;
        position: relative;
    }
    
    .transport-index-header h1:after {
        content: '';
        position: absolute;
        bottom: -5px;
        left: 0;
        width: 60px;
        height: 3px;
        background: linear-gradient(90deg, #4285F4, #34A853);
    }
    
    /* Search and Filter Styles */
    .search-filter-container {
        display: flex;
        justify-content: space-between;
        gap: 20px;
        margin-bottom: 30px;
    }
    
    .search-box {
        flex: 1;
        position: relative;
    }
    
    .search-input {
        width: 100%;
        padding: 14px 20px 14px 50px;
        border: 1px solid #e0e0e0;
        border-radius: 50px;
        font-size: 15px;
        transition: all 0.3s ease;
        box-shadow: 0 4px 12px rgba(0,0,0,0.05);
    }
    
    .search-input:focus {
        border-color: #4285F4;
        outline: none;
        box-shadow: 0 5px 15px rgba(66, 133, 244, 0.2);
    }
    
    .search-icon {
        position: absolute;
        left: 20px;
        top: 50%;
        transform: translateY(-50%);
        color: #8e9aac;
        font-size: 18px;
    }
    
    .filter-container {
        position: relative;
    }
    
    .filter-btn {
        display: flex;
        align-items: center;
        gap: 8px;
        background: #f8f9fa;
        color: #263A5B;
        border: 1px solid #e0e0e0;
        border-radius: 50px;
        padding: 13px 25px;
        font-size: 15px;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.3s ease;
    }
    
    .filter-btn:hover {
        background: #f0f3f6;
    }
    
    .filter-dropdown-content {
        position: absolute;
        top: 120%;
        right: 0;
        width: 320px;
        background: white;
        border-radius: 12px;
        box-shadow: 0 10px 30px rgba(0,0,0,0.15);
        padding: 20px;
        z-index: 100;
        display: none;
    }
    
    .filter-group {
        margin-bottom: 18px;
    }
    
    .filter-group h3 {
        font-size: 14px;
        color: #8e9aac;
        margin-bottom: 12px;
        font-weight: 500;
    }
    
    .filter-options {
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
    }
    
    .filter-options label {
        display: flex;
        align-items: center;
        gap: 6px;
        font-size: 14px;
        color: #263A5B;
        cursor: pointer;
        padding: 5px 8px;
        border-radius: 6px;
        transition: all 0.2s ease;
    }
    
    .filter-options label:hover {
        background: #f8f9fa;
    }
    
    .filter-actions {
        display: flex;
        justify-content: space-between;
        margin-top: 20px;
        padding-top: 15px;
        border-top: 1px solid #f0f0f0;
    }
    
    .filter-clear {
        background: transparent;
        color: #8e9aac;
        border: 1px solid #e0e0e0;
        padding: 8px 15px;
        border-radius: 6px;
        font-size: 13px;
        cursor: pointer;
        transition: all 0.3s ease;
    }
    
    .filter-clear:hover {
        background: #f8f9fa;
    }
    
    .filter-apply {
        background: linear-gradient(135deg, #4285F4, #34A853);
        color: white;
        border: none;
        padding: 8px 20px;
        border-radius: 6px;
        font-size: 13px;
        font-weight: 500;
        cursor: pointer;
        box-shadow: 0 4px 12px rgba(66, 133, 244, 0.3);
        transition: all 0.3s ease;
    }
    
    .filter-apply:hover {
        transform: translateY(-2px);
        box-shadow: 0 6px 16px rgba(66, 133, 244, 0.4);
    }
    /* End of Search and Filter Styles */
    
    .create-btn {
        display: inline-flex;
        align-items: center;
        gap: 8px;
        background: linear-gradient(135deg, #4285F4, #34A853);
        color: white;
        text-decoration: none;
        font-size: 15px;
        font-weight: 500;
        transition: all 0.3s ease;
        padding: 12px 24px;
        border-radius: 50px;
        box-shadow: 0 5px 15px rgba(66, 133, 244, 0.3);
    }
    
    .create-btn:hover {
        transform: translateY(-3px);
        box-shadow: 0 8px 20px rgba(66, 133, 244, 0.4);
    }
    
    .transport-table-container {
        background-color: white;
        border-radius: 15px;
        box-shadow: 0 10px 30px rgba(0,0,0,0.08);
        padding: 40px 30px;
        position: relative;
        margin-top: 10px;
        transition: all 0.3s ease;
    }
    
    .transport-table-container:hover {
        box-shadow: 0 15px 40px rgba(0,0,0,0.12);
    }
    
    .table-icon {
        width: 80px;
        height: 80px;
        background: linear-gradient(135deg, #4285F4, #34A853);
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        position: absolute;
        top: -40px;
        left: 50%;
        transform: translateX(-50%);
        color: white;
        font-size: 30px;
        box-shadow: 0 5px 20px rgba(66, 133, 244, 0.4);
        transition: all 0.3s ease;
    }
    
    .table-icon:hover {
        transform: translateX(-50%) scale(1.05);
    }
    
    .table-responsive {
        overflow-x: auto;
        margin-top: 20px;
    }
    
    .table {
        width: 100%;
        border-collapse: separate;
        border-spacing: 0;
        margin-bottom: 20px;
    }
    
    .table thead tr {
        background: #f8f9fa;
    }
    
    .table th {
        padding: 16px 20px;
        text-align: left;
        font-weight: 600;
        color: #263A5B;
        font-size: 15px;
        border-bottom: 2px solid #eaeaea;
        white-space: nowrap;
    }
    
    .table td {
        padding: 16px 20px;
        font-size: 14px;
        color: #333;
        border-bottom: 1px solid #eaeaea;
        transition: all 0.2s ease;
    }
    
    .table tr:hover td {
        background-color: #f8f9fa;
    }
    
    .table tr:last-child td {
        border-bottom: none;
    }
    
    .actions-column {
        width: 200px;
        text-align: right;
    }
    
    .action-buttons {
        display: flex;
        gap: 10px;
        justify-content: flex-end;
    }
    
    .view-btn, .edit-btn {
        display: inline-flex;
        align-items: center;
        gap: 5px;
        padding: 8px 12px;
        border-radius: 6px;
        font-size: 13px;
        font-weight: 500;
        text-decoration: none;
        transition: all 0.3s ease;
    }
    
    .view-btn {
        background-color: #f0f5ff;
        color: #4285F4;
    }
    
    .view-btn:hover {
        background-color: #4285F4;
        color: white;
    }
    
    .edit-btn {
        background-color: #e8f5e9;
        color: #34A853;
    }
    
    .edit-btn:hover {
        background-color: #34A853;
        color: white;
    }
    
    .no-records {
        display: flex;
        flex-direction: column;
        align-items: center;
        padding: 60px 20px;
        text-align: center;
    }
    
    .no-records-icon {
        width: 80px;
        height: 80px;
        background-color: #f5f5f5;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 30px;
        color: #999;
        margin-bottom: 20px;
    }
    
    .no-records h3 {
        font-size: 22px;
        color: #263A5B;
        margin-bottom: 10px;
        font-weight: 600;
    }
    
    .no-records p {
        color: #777;
        max-width: 400px;
    }
    
    @media (max-width: 992px) {
        .transport-index-header {
            flex-direction: column;
            align-items: flex-start;
            gap: 20px;
        }
        
        .search-filter-container {
            flex-direction: column;
        }
        
        .filter-dropdown-content {
            width: 100%;
            right: auto;
            left: 0;
        }
        
        .actions-column {
            width: auto;
        }
        
        .action-buttons {
            flex-direction: column;
            gap: 8px;
            align-items: flex-start;
        }
    }
    
    @media (max-width: 768px) {
        .transport-table-container {
            padding: 30px 15px;
        }
        
        .table th, .table td {
            padding: 12px 10px;
        }
        
        .transport-index-header h1 {
            font-size: 28px;
        }
    }
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
    // Search functionality
    const searchInput = document.getElementById('transportSearch');
    const tableBody = document.getElementById('transportTableBody');
    const tableRows = tableBody ? Array.from(tableBody.querySelectorAll('tr')) : [];
    const noSearchResults = document.getElementById('no-search-results');
    
    if (searchInput && tableBody) {
        searchInput.addEventListener('input', function() {
            const searchTerm = this.value.toLowerCase();
            let matchFound = false;
            
            tableRows.forEach(row => {
                const carModel = row.cells[1].textContent.toLowerCase();
                const carColor = row.cells[2].textContent.toLowerCase();
                const licensePlate = row.cells[3].textContent.toLowerCase();
                
                if (carModel.includes(searchTerm) || 
                    carColor.includes(searchTerm) || 
                    licensePlate.includes(searchTerm)) {
                    row.style.display = '';
                    matchFound = true;
                } else {
                    row.style.display = 'none';
                }
            });
            
            // Show/hide no results message
            if (noSearchResults) {
                noSearchResults.style.display = matchFound ? 'none' : 'flex';
                const tableContainer = document.querySelector('.table-responsive');
                if (tableContainer) {
                    tableContainer.style.display = matchFound ? '' : 'none';
                }
            }
        });
    }
    
    // Filter dropdown toggle
    const filterButton = document.getElementById('filterButton');
    const filterDropdown = document.getElementById('filterDropdown');
    
    if (filterButton && filterDropdown) {
        filterButton.addEventListener('click', function() {
            if (filterDropdown.style.display === 'block') {
                filterDropdown.style.display = 'none';
            } else {
                filterDropdown.style.display = 'block';
            }
        });
        
        // Close dropdown when clicking outside
        document.addEventListener('click', function(event) {
            if (!filterButton.contains(event.target) && !filterDropdown.contains(event.target)) {
                filterDropdown.style.display = 'none';
            }
        });
    }
    
    // Filter functionality
    const applyFiltersBtn = document.getElementById('applyFilters');
    const clearFiltersBtn = document.getElementById('clearFilters');
    const filterCheckboxes = document.querySelectorAll('.filter-options input[type="checkbox"]');
    
    if (applyFiltersBtn && tableBody) {
        applyFiltersBtn.addEventListener('click', function() {
            applyFilters();
            filterDropdown.style.display = 'none';
        });
    }
    
    if (clearFiltersBtn) {
        clearFiltersBtn.addEventListener('click', function() {
            filterCheckboxes.forEach(checkbox => {
                checkbox.checked = false;
            });
            
            if (tableRows.length > 0) {
                applyFilters();
            }
        });
    }
    
    function applyFilters() {
        const colorFilters = Array.from(document.querySelectorAll('.filter-options input[type="checkbox"]'))
            .filter(checkbox => checkbox.checked && checkbox.parentElement.parentElement.previousElementSibling.textContent === 'Car Color')
            .map(checkbox => checkbox.value);
            
        const luggageFilters = Array.from(document.querySelectorAll('.filter-options input[type="checkbox"]'))
            .filter(checkbox => checkbox.checked && checkbox.parentElement.parentElement.previousElementSibling.textContent === 'Max Luggage')
            .map(checkbox => checkbox.value);
        
        let matchFound = false;
        
        tableRows.forEach(row => {
            const carColor = row.cells[2].textContent.toLowerCase();
            const maxLuggage = parseInt(row.cells[4].textContent);
            
            // Check if row matches all active filters
            const matchesColor = colorFilters.length === 0 || colorFilters.some(filter => {
                if (filter === 'other') {
                    return !['black', 'white', 'silver', 'blue', 'red', 'yellow', 'green', 'grey', 'brown'].some(common => carColor.includes(common.toLowerCase()));
                }
                return carColor.toLowerCase().includes(filter);
            });
            
            const matchesLuggage = luggageFilters.length === 0 || luggageFilters.some(filter => {
                if (filter === '1-2') return maxLuggage >= 1 && maxLuggage <= 2;
                if (filter === '3-4') return maxLuggage >= 3 && maxLuggage <= 4;
                if (filter === '5+') return maxLuggage >= 5;
                return false;
            });
            
            const shouldDisplay = matchesColor && matchesLuggage;
            row.style.display = shouldDisplay ? '' : 'none';
            
            if (shouldDisplay) {
                matchFound = true;
            }
        });
        
        // Show/hide no results message
        if (noSearchResults) {
            noSearchResults.style.display = matchFound ? 'none' : 'flex';
            const tableContainer = document.querySelector('.table-responsive');
            if (tableContainer) {
                tableContainer.style.display = matchFound ? '' : 'none';
            }
        }
    }
});
</script>
{% endblock %}